export default function SimpleList({listHeaderText, listSource} ) {
   
    return (
        <>

{/*3.  Немного усложним. Теперь мы хотим, чтобы в компоненте SimpleList наш заголовок рендерился только в том случае, если проп listHeaderText не пустой (не null, undefined, ...). Тут нам поможет условный рендеринг. */}

        {listHeaderText && <h4>{listHeaderText}</h4>}
        {
            (listSource && listSource.lenght > 0)
            ?
            <ul>
        {
          listSource.map( elem => <li key={elem}>{elem}</li>)
        }
      </ul>
      : <p>Empty datasourse!</p>} 
      
      
        </>
        
    )
}

// 2. Продолжаем пристрелку. У нас есть компонент SimpleList. Он нам сейчас рендерит ul. Предположим, мы хотим рендерить список с заголовком. То есть, в наш компонент нухно в пропсах передать текст заголовка (используем проп listHeaderText), и этот текст отрендерить в теге h4 над списком.

// 4. Попробуем передать в пропсах не примитив. Сейчас наш список рисует нам элементы из массива, который определен в компоненте. Это немного не то, что хочется. Давайте научим наш компонент работать с данными извне. Он теперь должен принимать пропс listSource, который будет содержать массив строк. И наша задача - пройтись по этому массиву, и отрендерить каждый элемент.

// 5. Модернизируем наш компонент. Иногда бывает так, что массив listSource приходит пустой. В этом случае, нам нужно не рисовать список, а отрендерить параграф с текстом Empty datasource!. Тут нам тоже пригодится условный рендеринг.